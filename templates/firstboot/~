heat_template_version: 2014-10-16
parameters:
  ComputeKernelArgs:
    default: "default_hugepagesz=1GB hugepagesz=1G hugepages=512 iommu=pt intel_iommu=on"
    type: string
  HostIsolatedCoreList:
    description: >
      A list or range of physical CPU cores to be tuned as isolated_cores.
      The given args will be appended to the tuned cpu-partitioning profile.
      Ex. HostIsolatedCoreList: '4-12' will tune cores from 4-12
    type: string
    default: ""    
  HostCpusList:
    description: >
      List of logical cores to be used by ovs-dpdk processess (dpdk-lcore-mask)
    type: string
    constraints:
      - allowed_pattern: "'[0-9,]+'"

resources:
  userdata:
    type: OS::Heat::MultipartMime
    properties:
      parts:
      - config: {get_resource: swapon_config}
      - config: {get_resource: firstboot_config}
#      - config: {get_resource: compute_kernel_args}

  swapon_config:
    type: OS::Heat::SoftwareConfig
    properties:
      config: |
        #!/bin/bash
        swap_device=$(sudo fdisk -l | grep swap | awk '{print $1}')
        if [[ $swap_device && ${swap_device} ]]; then
          rc_local="/etc/rc.d/rc.local"
          echo "swapon $swap_device " >> $rc_local
          chmod 755 $rc_local
          swapon $swap_device
        fi

  firstboot_config:
    type: OS::Heat::SoftwareConfig
    properties:
      group: script
      config: {get_file: /home/stack/templates/firstboot/firstboot-setup.sh}

  compute_kernel_args:
    type: OS::Heat::SoftwareConfig
    properties:
      config:
        str_replace:
          template: |
            #!/bin/bash
            FORMAT="compute"
            if [[ $(hostname) == *$FORMAT* ]] ; then
              sed 's/^\(GRUB_CMDLINE_LINUX=".*\)"/\1 $KERNEL_ARGS isolcpus=$TUNED_CORES"/g' -i /etc/default/grub ;
              grub2-mkconfig -o /etc/grub2.cfg
              reboot
            fi
          params:
            $KERNEL_ARGS: {get_param: ComputeKernelArgs}
            $TUNED_CORES: {get_param: HostIsolatedCoreList}
           
outputs:
  OS::stack_id:
    value: {get_resource: userdata}
